const regions = [
  {
    id: "britain",
    name: "Britain",
    description: "The British Invasion and beyond",
    color: "#FEE96A",
    position: { x: 20, y: 30 },
    playlists: [
      {
        title: "The British Invasion",
        description: "From The Beatles to The Rolling Stones, explore the sounds that conquered America and changed music forever.",
        image: "/images/british-invasion.jpg",
        video: "https://www.youtube.com/embed/example1",
        tracks: ["I Want To Hold Your Hand - The Beatles", "Satisfaction - The Rolling Stones", "My Generation - The Who"]
      },
      {
        title: "London Psychedelia",
        description: "The mind-bending sounds of London's underground scene in the late 60s.",
        image: "/images/london-psychedelia.jpg",
        video: "https://www.youtube.com/embed/example2",
        tracks: ["Arnold Layne - Pink Floyd", "See Emily Play - Pink Floyd", "White Rabbit - Jefferson Airplane"]
      }
    ]
  },
  {
    id: "america",
    name: "America",
    description: "Folk, rock, and the counterculture",
    color: "#C13870",
    position: { x: 15, y: 45 },
    playlists: [
      {
        title: "Folk Revival",
        description: "The protest songs and acoustic sounds that defined a generation.",
        image: "/images/folk-revival.jpg",
        video: "https://www.youtube.com/embed/example3",
        tracks: ["Blowin' in the Wind - Bob Dylan", "The Times They Are A-Changin' - Bob Dylan", "If I Had a Hammer - Peter, Paul and Mary"]
      },
      {
        title: "San Francisco Sound",
        description: "The psychedelic rock scene that emerged from the Bay Area.",
        image: "/images/san-francisco.jpg",
        video: "https://www.youtube.com/embed/example4",
        tracks: ["Somebody to Love - Jefferson Airplane", "White Rabbit - Jefferson Airplane", "Piece of My Heart - Big Brother & The Holding Company"]
      }
    ]
  },
  {
    id: "jamaica",
    name: "Jamaica",
    description: "Ska, rocksteady, and the birth of reggae",
    color: "#FEE96A",
    position: { x: 25, y: 55 },
    playlists: [
      {
        title: "Ska Explosion",
        description: "The infectious rhythms that would influence music worldwide.",
        image: "/images/ska-explosion.jpg",
        video: "https://www.youtube.com/embed/example5",
        tracks: ["My Boy Lollipop - Millie Small", "Guns of Navarone - The Skatalites", "Simmer Down - The Wailers"]
      }
    ]
  },
  {
    id: "brazil",
    name: "Brazil",
    description: "Bossa nova and tropicalia",
    color: "#C13870",
    position: { x: 30, y: 60 },
    playlists: [
      {
        title: "Bossa Nova Revolution",
        description: "The smooth sounds that brought Brazilian music to the world stage.",
        image: "/images/bossa-nova.jpg",
        video: "https://www.youtube.com/embed/example6",
        tracks: ["The Girl from Ipanema - Stan Getz & João Gilberto", "Desafinado - João Gilberto", "Corcovado - Stan Getz & João Gilberto"]
      },
      {
        title: "Tropicalia Movement",
        description: "The experimental fusion that challenged Brazil's musical traditions.",
        image: "/images/tropicalia.jpg",
        video: "https://www.youtube.com/embed/example7",
        tracks: ["Tropicália - Caetano Veloso", "Alegria, Alegria - Caetano Veloso", "Panis et Circenses - Os Mutantes"]
      }
    ]
  },
  {
    id: "india",
    name: "India",
    description: "Raga rock and classical fusion",
    color: "#FEE96A",
    position: { x: 65, y: 50 },
    playlists: [
      {
        title: "Raga Rock Revolution",
        description: "When Western rock met Indian classical music.",
        image: "/images/raga-rock.jpg",
        video: "https://www.youtube.com/embed/example8",
        tracks: ["Norwegian Wood - The Beatles", "Within You Without You - The Beatles", "Paint It Black - The Rolling Stones"]
      }
    ]
  }
];
function selectRegion(regionId) {
  const region = regions.find((r) => r.id === regionId);
  if (!region)
    return;
  const detailsContainer = document.getElementById("region-details");
  detailsContainer.innerHTML = `
      <div class="bg-[#FEE96A]/10 p-8 rounded-lg border border-[#FEE96A]/30">
        <div class="flex items-center mb-6">
          <div class="w-6 h-6 rounded-full mr-4" style="background-color: ${region.color};"></div>
          <h4 class="text-3xl font-bold text-[#064161]">${region.name}</h4>
        </div>
        <p class="text-xl text-[#064161]/80 mb-8">${region.description}</p>
        
        <div class="grid md:grid-cols-2 gap-8">
          ${region.playlists.map((playlist) => `
            <div class="playlist-card bg-white p-6 rounded-lg border border-[#FEE96A]/30 shadow-sm">
              <h5 class="text-xl font-bold text-[#064161] mb-4">${playlist.title}</h5>
              <p class="text-[#064161]/80 mb-4">${playlist.description}</p>
              
              <div class="mb-4">
                <h6 class="text-sm font-bold text-[#064161] mb-2">Featured Tracks:</h6>
                <ul class="text-sm text-[#064161]/70 space-y-1">
                  ${playlist.tracks.map((track) => `<li>• ${track}</li>`).join("")}
                </ul>
              </div>
              
              <div class="flex space-x-4">
                <button class="bg-[#FEE96A] text-[#064161] px-4 py-2 rounded font-bold hover:bg-[#FEE96A]/80 transition-colors">
                  Listen to Playlist
                </button>
                <button class="border border-[#064161] text-[#064161] px-4 py-2 rounded font-bold hover:bg-[#064161] hover:text-white transition-colors">
                  Learn More
                </button>
              </div>
            </div>
          `).join("")}
        </div>
      </div>
    `;
  detailsContainer.scrollIntoView({ behavior: "smooth" });
}
window.selectRegion = selectRegion;

//# sourceMappingURL=data:application/json;base64,