---
// This component will be client-side rendered to handle Spotify API calls


---

<div id="now-playing" class="fixed bottom-0 right-0 bg-white border border-[#FEE96A]/30 rounded-lg shadow-lg px-4 py-2 w-full hidden max-w-md">
  <p class="text-md font-bold text-[#064161]">Now Playing:</p>
  <div class="flex items-center space-x-3">
    <div id="album-art" class="w-12 h-12 bg-gray-200 rounded flex-shrink-0">
      <img id="album-image" src="" alt="Album Art" class="w-full h-full rounded object-cover hidden">
    </div>
    <div class="flex-1 min-w-0">
      <div id="track-info" class="text-sm">
        <p id="track-name" class="font-medium text-[#064161] truncate">Loading...</p>
        <p id="artist-name" class="text-[#064161]/70 truncate">Loading...</p>
      </div>
     
    </div>
    <div class="flex flex-col items-center space-y-1">
      
      <div id="spotify-logo" class="w-4 h-4">
        <svg viewBox="0 0 24 24" fill="#1DB954">
          <path d="M12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.66 0 12 0zm5.521 17.34c-.24.359-.66.48-1.021.24-2.82-1.74-6.36-2.101-10.561-1.141-.418.122-.779-.179-.899-.539-.12-.421.18-.78.54-.9 4.56-1.021 8.52-.6 11.64 1.32.42.18.479.659.301 1.02zm1.44-3.3c-.301.42-.841.6-1.262.3-3.239-1.98-8.159-2.58-11.939-1.38-.479.12-1.02-.12-1.14-.6-.12-.48.12-1.021.6-1.141C9.6 9.9 15 10.561 18.72 12.84c.361.181.54.78.241 1.2zm.12-3.36C15.24 8.4 8.82 8.16 5.16 9.301c-.6.179-1.2-.181-1.38-.721-.18-.601.18-1.2.72-1.381 4.26-1.26 11.28-1.02 15.721 1.621.539.3.719 1.02.419 1.56-.299.421-1.02.599-1.559.3z"/>
        </svg>
      </div>
    </div>
  </div>
</div>

<script>
  import { supabase } from '../lib/supabase';

  const updateDisplay = (trackData) => {
    console.log('trackData', trackData);
    const container = document.getElementById('now-playing');
    const trackName = document.getElementById('track-name');
    const artistName = document.getElementById('artist-name');
    const albumImage = document.getElementById('album-image') as HTMLImageElement;
 
   

    if (!trackData || !trackData.track) {
      container.classList.add('hidden');
      return;
    }

    const track = trackData.track;
    const isPlaying = trackData?.playing;
    const progress = trackData?.raw?.progress_ms || 0;
    const duration = trackData?.raw?.duration_ms || 0;

    // Update track info
    trackName.textContent = track.name;
    artistName.textContent = track?.artist || track?.artists?.map(artist => artist.name).join(', ');

    // Update album art
    if (track.image) {
      albumImage.src = track.image;
      albumImage.classList.remove('hidden');
    }



    

    // Show the container
    container.classList.remove('hidden');
  };

  const formatTime = (ms) => {
    const minutes = Math.floor(ms / 60000);
    const seconds = Math.floor((ms % 60000) / 1000);
    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
  };

  const nowPlaying = async () => {
    try {
      // Fetch now playing data from Supabase database
      const { data, error } = await supabase
        .from('now_playing')
        .select('details')
        .eq('id', 1)
        .single();

      if (error) {
        console.error('Error fetching now playing data:', error);
        showDemoData();
        return;
      }

      if (data && data.details) {
        console.log('Now playing data:', data.details);
        updateDisplay(data.details);
      } else {
        console.log('No now playing data found');
        showDemoData();
      }
    } catch (error) {
      console.error('Error fetching now playing:', error);
      showDemoData();
    }
  };

  const showDemoData = () => {
    // Demo data for when API is not available
    const demoData = {
      track: {
        name: "Norwegian Wood (This Bird Has Flown)",
        artists: [{ name: "The Beatles" }],
        image: "https://i.scdn.co/image/ab67616d0000b273dc3058ba0c6c3bd3a2e4b5b5",
        duration_ms: 125000
      },
      playing: true,
      raw: {
        progress_ms: 45000,
        duration_ms: 125000
      }
    };

    updateDisplay(demoData);
  };

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    // Initial fetch
    nowPlaying();
    
    // Poll every 10 seconds for updates
    setInterval(() => {
      nowPlaying();
    }, 10000);
  });
</script>

<style>
  #now-playing {
    backdrop-filter: blur(10px);
    background: rgba(255, 255, 255, 0.95);
    border: 1px solid rgba(254, 233, 106, 0.3);
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
  }

  #progress-bar {
    transition: width 1s linear;
  }

  #play-pause-btn:hover {
    transform: scale(1.05);
  }
</style>
