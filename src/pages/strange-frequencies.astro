---
import Layout from "../layouts/Layout.astro";
import Menu from "../components/Menu.astro";
import { supabase } from '../lib/supabase';

// Initial server-side fetch of active prompts
let { data: prompts, error } = await supabase
  .from('prompts')
  .select('*')
  .eq('status', true)
  .order('id', { ascending: true });

console.log('Server-side prompts:', prompts);
console.log('Server-side error:', error);
---

<Layout title="Strange Frequencies">
  <Menu title="Strange Frequencies" />
  <main class="md:ml-[100px] pt-[86px] md:mr-[86px] p-10">
   <div class="text-[#f5e656] sf-cont p-12">
    <h1 class="text-4xl mt-10 font-bold">FGR's Strange Frequencies</h1>
    <p class="text-lg mb-10">A listening companion in 40 prompts.</p>
    
    <h2 class="text-2xl font-bold">What it is</h2>
    <p class="text-lg">
      Not a game. Not a playlist generator. Not a music discovery tool.
      FGR's Strange Frequencies is a box of 40 cue cards to make listening a little more intentional—and just as in-the-moment.
      Pull out a card with a group of friends and decide how the night's gonna sound. Or use it alone, right before you hit play, paint, write, or work—whatever helps set the tone.
    </p>
   
    <p class="text-lg">
      Some prompts are emotional. Some are abstract. Some are just strange.
      They're not here to tell you what to listen to. They're here to give shape to how you arrive at it.
    </p>
    
    <h2 class="text-2xl font-bold mt-10">Who it's for</h2>
    <p class="text-lg">
      A group of friends hanging out, using the cards to decide what plays next.
      A DJ before a set—on a dancefloor, or at a house party.
      A vinyl collector looking for a fresh filter: "find something without drums."
      Themed playlist nerds looking for new constraints (yes, you).
      A nice gift for someone who likes music but doesn't need more gear.
      Creative people setting the mood while they work.
      People who keep skipping songs. This slows them down.
    </p>
    
    <h2 class="text-2xl font-bold mt-10">Why we made it</h2>
    <p class="text-lg">
      This isn't about showing off your taste or chasing newness.
      We're kind of tired of that.
      Strange Frequencies is about giving music a little more room to land—without pressure, without performance. Just a nudge, a pause, a different way in.
      A quiet game for loud music.
    </p>
    <p class="text-sm">—FGR</p>
    <hr class="my-10 border-yellow-500"/>

    </div>

    <div id="prompts-container" class="space-y-4 text-[#f5e656] p-10 hidden">  
        {prompts?.map((prompt) => (
            <div class="prompt-card" data-prompt-id={prompt.id}>
                <p class="text-lg">  {prompt.content}</p>
            </div>
        ))}
    </div>

    <!-- Password Modal -->
    <div id="password-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div class="bg-[#23262d] p-8 rounded-lg shadow-xl max-w-md w-full mx-4">
        <h2 class="text-2xl font-bold text-[#f5e656] mb-4">Enter Password</h2>
        <div class="space-y-4">
          <input 
            type="password" 
            id="password-input" 
            class="w-full px-4 py-2 bg-[#13151a] border border-[#f5e656] rounded text-[#f5e656] focus:outline-none focus:border-[#f5e656] focus:ring-1 focus:ring-[#f5e656]"
            placeholder="Enter password"
          />
          <p id="error-message" class="text-red-500 text-sm hidden">Incorrect password</p>
          <button 
            id="submit-password"
            class="w-full bg-[#f5e656] text-[#13151a] py-2 px-4 rounded font-bold hover:bg-[#e6d84d] transition-colors"
          >
            Submit
          </button>
        </div>
      </div>
    </div>

    <!-- <Contact /> -->
  </main>
</Layout>

<style>
    #prompts-container {
        background-image: url('/prompt_BG.webp');
        background-size: 100% 100%;
        background-repeat: repeat;
        border-radius: 10px;
        margin-bottom: 20px;
    }

    .sf-cont {
        background-image: url('/prompt_BG.webp');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        border-radius: 10px;
        margin-bottom: 20px;
    }

    .prompt-card {
        transition: opacity 0.5s ease-out;
        padding: 1rem;
        border-radius: 0.5rem;
        background-color: rgba(0, 0, 0, 0.2);
    }

    .prompt-card.removing {
        opacity: 0;
    }

    #password-modal {
        backdrop-filter: blur(4px);
    }
</style>

<script>
  import { supabase } from '../lib/supabase';

  // Password protection
  const CORRECT_PASSWORD = 'fgr2024'; // Change this to your desired password
  const modal = document.getElementById('password-modal');
  const passwordInput = document.getElementById('password-input') as HTMLInputElement;
  const submitButton = document.getElementById('submit-password');
  const errorMessage = document.getElementById('error-message');
  const promptsContainer = document.getElementById('prompts-container');

  // Check if already authenticated
  if (localStorage.getItem('fgr_authenticated') === 'true') {
    modal.classList.add('hidden');
    promptsContainer.classList.remove('hidden');
  }

  function handlePasswordSubmit() {
    const password = passwordInput.value;
    if (password === CORRECT_PASSWORD) {
      localStorage.setItem('fgr_authenticated', 'true');
      modal.classList.add('hidden');
      promptsContainer.classList.remove('hidden');
      errorMessage.classList.add('hidden');
    } else {
      errorMessage.classList.remove('hidden');
      passwordInput.value = '';
    }
  }

  submitButton.addEventListener('click', handlePasswordSubmit);
  passwordInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      handlePasswordSubmit();
    }
  });

  // Real-time subscription
  const subscription = supabase
    .channel('prompts-changes')
    .on(
      'postgres_changes',
      {
        event: '*',
        schema: 'public',
        table: 'prompts'
      },
      (payload) => {
        console.log('Received real-time update:', payload);
        const container = document.getElementById('prompts-container');
        if (!container) {
          console.error('Prompts container not found');
          return;
        }

        // Handle updates (when status changes to false)
        if (payload.eventType === 'UPDATE' && !payload.new.status) {
          console.log('Handling prompt deactivation:', payload.new.id);
          const promptElement = container.querySelector(`[data-prompt-id="${payload.new.id}"]`);
          if (promptElement) {
            promptElement.classList.add('removing');
            setTimeout(() => {
              promptElement.remove();
            }, 500);
          }
        }

        // Handle new prompts
        if (payload.eventType === 'INSERT' && payload.new.status) {
          console.log('Handling new prompt:', payload.new);
          const promptDiv = document.createElement('div');
          promptDiv.className = 'prompt-card';
          promptDiv.dataset.promptId = payload.new.id;
          
          const content = document.createElement('p');
          content.className = 'text-lg';
          content.textContent = payload.new.content;
          promptDiv.appendChild(content);

          container.insertBefore(promptDiv, container.firstChild);
        }
      }
    )
    .subscribe((status) => {
      console.log('Subscription status:', status);
    });

  // Also fetch prompts on client side to verify connection
  supabase
    .from('prompts')
    .select('*')
    .eq('status', true)
    .order('id', { ascending: true })
    .then(({ data, error }) => {
      console.log('Client-side fetch result:', { data, error });
    });
</script>
