---
import Layout from "../layouts/Layout.astro";
import Menu from "../components/Menu.astro";
import { supabase } from '../lib/supabase';

// Initial server-side fetch of active prompts
let { data: prompts, error } = await supabase
  .from('prompts')
  .select('*')
  .eq('status', true)
  .order('id', { ascending: true });

console.log('Server-side prompts:', prompts);
console.log('Server-side error:', error);
---

<Layout title="Strange Frequencies">
  <Menu title="Strange Frequencies" />
  <main class="md:ml-[100px] pt-[86px] md:mr-[86px] md:p-10 p-2">
   <!-- Content -->
    <div class="text-[#f5e656] sf-cont md:p-12 p-8 ">
    <h1 class="text-4xl mt-4 font-bold">FGR's Strange Frequencies</h1>
    <p class="text-lg mb-10">A listening companion in 40 prompts.</p>
  
    <p class="text-lg mb-4">First off â€” thank you for being part of this and making it this far. Whether you've been quietly lurking or loudly cheering, itâ€™s meant a lot. Now, if youâ€™re still with us and thinking of taking the next step... this is where things get fun.</p>

    <p class="text-lg mb-4">Weâ€™re putting together something that gives people a new way to discover music â€” made by real people with real taste (read: not the algorithm). Itâ€™s called FGRâ€™s Strange Frequencies â€” a box of music prompts to shake up how we listen. And weâ€™d love for you to help shape it.</p>

    <h2 class="text-2xl font-bold mb-2">Hereâ€™s how it works:</h2>
    <p class="text-lg ">Pick one prompt from the list. Once you call dibs, we scratch that prompt off live.</p>
    <p class="text-lg ">Curate a minimum 3-hour Spotify playlist inspired by it. (Unfortunate we have to go back use spotify but it IS the most universally used platform)</p>
    <p class="text-lg ">Set the playlist to public.</p>
    <p class="text-lg ">Add a tiny 7â€“10 word note to go with it (Optional).</p>
    <p class="text-lg ">Send it in before June 20th.</p>

    <p class="text-lg mt-8 mb-4"> <span class="font-bold">Have your own theme in mind?</span> Amazing â€” tell us, and if it fits the vibe, weâ€™ll make space.</p>

    <p class="text-lg mb-4">Weâ€™ll be doing a small, limited edition run of these boxes designed by some super talented artistsâ€” a few will be given away as a part of our 5th year anniversary celebrations, the rest weâ€™ll sell. Itâ€™s secret for now, so keep it hush till we drop it in the right way.</p>

    <p class="text-lg mb-4">Please donâ€™t feel pressure to hit the 3-hour mark exactly â€” itâ€™s just a guide. Also, dont worry about keeping this PC. The idea is for people to go deep, wander weird corners, maybe fall into a few rabbit holes, maybe dig some new ones. Basically: Embrace the strange. Thatâ€™s the FGR way.</p>

    <p class="text-lg mb-4">Excited to hear what you come up with. ðŸ’Œ</p>

    <p class="text-lg">With love (and many tabs open),</p>
    <p class="text-2xl mb-4">FGR</p>

  
    <hr id="hr-1" class="my-10 border-yellow-500"/>

    </div>

    <!-- Prompts List -->
    <div id="prompts-container" class=" text-[#f5e656] md:p-10 p-4 hidden">  
      <p class="text-lg mb-6">We request that you take a few minutes to read through all the prompts before making your pick â€” find the one that sparks something, feels exciting, and lets you go deep.</p>
      <div id="prompts-list" class="space-y-4">
            {prompts?.map((prompt) => (
                <div class="md:p-4 py-2 pl-2 bg-black/25 rounded-lg prompt-card" data-prompt-id={prompt.id}>
                    <p class="text-lg">{prompt.id}.  {prompt.content}</p>
                </div>
            ))}
        </div>
        <hr class="my-10 border-yellow-500"/>
        <div class="flex  justify-center items-center space-x-4 mt-8">
            <button id="prev-page" class="px-4 py-2 bg-[#23262d] text-[#f5e656] rounded hover:bg-[#2a2d35] transition-colors disabled:opacity-50 disabled:cursor-not-allowed">
              <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M6.85355 3.14645C7.04882 3.34171 7.04882 3.65829 6.85355 3.85355L3.70711 7H12.5C12.7761 7 13 7.22386 13 7.5C13 7.77614 12.7761 8 12.5 8H3.70711L6.85355 11.1464C7.04882 11.3417 7.04882 11.6583 6.85355 11.8536C6.65829 12.0488 6.34171 12.0488 6.14645 11.8536L2.14645 7.85355C1.95118 7.65829 1.95118 7.34171 2.14645 7.14645L6.14645 3.14645C6.34171 2.95118 6.65829 2.95118 6.85355 3.14645Z" fill="currentColor" fill-rule="evenodd" clip-rule="evenodd"></path></svg>
            </button>
            <span id="page-info" class="text-[#f5e656]">Page 1 of 4</span>
            <button id="next-page" class="px-4 py-2 bg-[#23262d] text-[#f5e656] rounded hover:bg-[#2a2d35] transition-colors disabled:opacity-50 disabled:cursor-not-allowed">
              <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M8.14645 3.14645C8.34171 2.95118 8.65829 2.95118 8.85355 3.14645L12.8536 7.14645C13.0488 7.34171 13.0488 7.65829 12.8536 7.85355L8.85355 11.8536C8.65829 12.0488 8.34171 12.0488 8.14645 11.8536C7.95118 11.6583 7.95118 11.3417 8.14645 11.1464L11.2929 8H2.5C2.22386 8 2 7.77614 2 7.5C2 7.22386 2.22386 7 2.5 7H11.2929L8.14645 3.85355C7.95118 3.65829 7.95118 3.34171 8.14645 3.14645Z" fill="currentColor" fill-rule="evenodd" clip-rule="evenodd"></path></svg>
            </button>
        </div>
    </div>

    <!-- Password Modal -->
    <div id="password-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div class="bg-[#23262d] p-8 rounded-lg shadow-xl max-w-md w-full mx-4">
        <h2 class="text-2xl font-bold text-[#f5e656] mb-4">Enter Password</h2>
        <div class="space-y-4">
          <input 
            type="password" 
            id="password-input" 
            class="w-full px-4 py-2 bg-[#13151a] border border-[#f5e656] rounded text-[#f5e656] focus:outline-none focus:border-[#f5e656] focus:ring-1 focus:ring-[#f5e656]"
            placeholder="Enter password"
          />
          <p id="error-message" class="text-red-500 text-sm hidden">Incorrect password</p>
          <button 
            id="submit-password"
            class="w-full bg-[#f5e656] text-[#13151a] py-2 px-4 rounded font-bold hover:bg-[#e6d84d] transition-colors"
          >
            Submit
          </button>
        </div>
      </div>
    </div>

    <!-- <Contact /> -->
  </main>
</Layout>

<style is:inline>
    #prompts-container {
        background-image: url('/prompt_BG.webp');
        background-size: 100% 100%;
        background-repeat: repeat;
        border-radius: 10px;
        margin-bottom: 20px;
    }

    .sf-cont {
        background-image: url('/prompt_BG.webp');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        border-radius: 10px;
        margin-bottom: 20px;
    }

    .prompt-card {
        transition: opacity 0.5s ease-out;
        border-radius: 0.5rem;
        background-color: rgba(0, 0, 0, 0.25);
    }

    .prompt-card.removing {
        opacity: 0;
    }

    #password-modal {
        backdrop-filter: blur(4px);
    }
</style>

<script>
  import { supabase } from '../lib/supabase';

  // Password protection
  const CORRECT_PASSWORD = 'fgr2024'; // Change this to your desired password
  const modal = document.getElementById('password-modal');
  const passwordInput = document.getElementById('password-input') as HTMLInputElement;
  const submitButton = document.getElementById('submit-password');
  const errorMessage = document.getElementById('error-message');
  const promptsContainer = document.getElementById('prompts-container');

  // Pagination
  const PROMPTS_PER_PAGE = 10;
  let currentPage = 1;
  let allPrompts: any[] = [];
  const promptsList = document.getElementById('prompts-list');
  const prevButton = document.getElementById('prev-page') as HTMLButtonElement;
  const nextButton = document.getElementById('next-page') as HTMLButtonElement;
  const pageInfo = document.getElementById('page-info');
  const hr1 = document.getElementById('hr-1');
  let initialLoad = true;

  function updatePagination() {
  
    const startIndex = (currentPage - 1) * PROMPTS_PER_PAGE;
    const endIndex = startIndex + PROMPTS_PER_PAGE;
    const pagePrompts = allPrompts.slice(startIndex, endIndex);
    
    // scroll to the top of the prompts list if not initial load
    if (hr1 && !initialLoad) {
      hr1.scrollIntoView({ behavior: 'smooth', block: 'start', inline: 'start' });
    }
    initialLoad = false;
    if (promptsList) {
      promptsList.innerHTML = pagePrompts.map(prompt => `
        <div class="md:p-4 py-2 pl-2 bg-black/25 rounded-lg prompt-card" data-prompt-id="${prompt.id}">
          <p class="text-lg">${prompt.id}. ${prompt.content}</p>
        </div>
      `).join('');
    }



    if (prevButton) prevButton.disabled = currentPage === 1;
    if (nextButton) nextButton.disabled = endIndex >= allPrompts.length;
    if (pageInfo) pageInfo.textContent = `Page ${currentPage} of ${Math.ceil(allPrompts.length / PROMPTS_PER_PAGE)}`;
  }

  if (prevButton) {
    prevButton.addEventListener('click', () => {
      if (currentPage > 1) {
        currentPage--;
        updatePagination();
      }
    });
  }

  if (nextButton) {
    nextButton.addEventListener('click', () => {
      const maxPage = Math.ceil(allPrompts.length / PROMPTS_PER_PAGE);
      if (currentPage < maxPage) {
        currentPage++;
        updatePagination();
      }
    });
  }

  // Check if already authenticated
  if (localStorage.getItem('fgr_authenticated') === 'true') {
    modal.classList.add('hidden');
    promptsContainer.classList.remove('hidden');
  }

  function handlePasswordSubmit() {
    const password = passwordInput.value;
    if (password === CORRECT_PASSWORD) {
      localStorage.setItem('fgr_authenticated', 'true');
      modal.classList.add('hidden');
      promptsContainer.classList.remove('hidden');
      errorMessage.classList.add('hidden');
    } else {
      errorMessage.classList.remove('hidden');
      passwordInput.value = '';
    }
  }

  submitButton.addEventListener('click', handlePasswordSubmit);
  passwordInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      handlePasswordSubmit();
    }
  });

  // Real-time subscription
  const subscription = supabase
    .channel('prompts-changes')
    .on(
      'postgres_changes',
      {
        event: '*',
        schema: 'public',
        table: 'prompts'
      },
      (payload) => {
        console.log('Received real-time update:', payload);
        const container = document.getElementById('prompts-container');
        if (!container) {
          console.error('Prompts container not found');
          return;
        }

        // Handle updates (when status changes to false)
        if (payload.eventType === 'UPDATE' && !payload.new.status) {
          console.log('Handling prompt deactivation:', payload.new.id);
          allPrompts = allPrompts.filter(p => p.id !== payload.new.id);
          updatePagination();
        }

        // Handle new prompts
        if (payload.eventType === 'INSERT' && payload.new.status) {
          console.log('Handling new prompt:', payload.new);
          allPrompts.unshift(payload.new);
          updatePagination();
        }
      }
    )
    .subscribe((status) => {
      console.log('Subscription status:', status);
    });

  // Initial fetch of prompts
  supabase
    .from('prompts')
    .select('*')
    .eq('status', true)
    .order('id', { ascending: true })
    .then(({ data, error }) => {
      if (data) {
        allPrompts = data;
        updatePagination();
      }
      console.log('Client-side fetch result:', { data, error });
    });
</script>
