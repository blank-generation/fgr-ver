---
import Layout from "../layouts/Layout.astro";
import NowPlaying from "../components/NowPlaying.astro";
import RegionDetails from "../components/RegionDetails.astro";

// Sample data for different regions and their playlists
const regions = [
  {
    id: 'south-america',
    name: 'South America',
    description: 'The South American sound in the 60s',
    color: '#FEE96A',
   day: 'Monday',
   isActive: true,
  },
  {
    id: 'africa',
    name: 'Africa',
    description: 'The African sound in the 60s',
    color: '#C13870',
    day: 'Tuesday',
    isActive: false,
  },
  {
    id: 'asia',
    name: 'Asia',
    description: 'The Asian sound in the 60s',
    color: '#FEE96A',
    day: 'Wednesday',
    isActive: false,
  },
  {
    id: 'europe',
    name: 'Europe',
    description: 'The European sound in the 60s',
    color: '#FEE96A',
    day: 'Thursday',
    isActive: false,
  },
  {
    id: 'middle-east',
    name: 'Middle East',
    description: 'The Middle East sound in the 60s',
    color: '#FEE96A',
    day: 'Friday',
    isActive: false,
  },
  {
    id: 'india',
    name: 'India',
    description: 'The Indian sound in the 60s',
    color: '#FEE96A',
    day: 'Saturday',
    isActive: false,
  },
  {
    id: 'australia',
    name: 'Australia',
    description: 'The Australian sound in the 60s',
    color: '#FEE96A',
    day: 'Sunday',
    isActive: false,
  },
];

const imageElements = [
  {
    id: 'image-1',
    src: '/imgs/SA/s1.png',
    alt: 'South America',
    x: 0,
    y: 0,
  },
  {
    id: 'image-2',
    src: '/imgs/SA/s2.png',
    alt: 'South America',
    x: 0,
    y: 0,
  },
  
  {
    id: 'image-3',
    src: '/imgs/SA/s3.png',
    alt: 'South America',
    x: 0,
    y: 0,
  },
  
  {
    id: 'image-4',
    src: '/imgs/SA/s4.png',
    alt: 'South America',
    x: 0,
    y: 0,
  },
  
  {
    id: 'image-5',
    src: '/imgs/SA/s5.png',
    alt: 'South America',
    x: 0,
    y: 0,
  },
  
];
---

<Layout title="FGR Curates: The Sixties Rumble" class="bg-white">
  <!-- <Menu title="The Sixties Rumble" /> -->
  <div class="decorations">
    {imageElements.map((img, i) => (
      <img 
        src={img.src} 
        alt={img.alt} 
        class={`decor-img spin-${i % 2} pulse-${i % 3}`} 
      />
    ))}
  </div>
  <main class="relative z-10  md:p-10 p-4  ">
    <!-- Hero Section -->
    <div class="text-center  mb-4">
      <!-- <h1 class="text-6xl font-bold text-[#FEE96A] mb-6">FGR CURATES</h1> -->
       <img src="/imgs/fgr_curr.png" alt="The Sixties Rumble" class="w-full h-auto max-w-md mx-auto">
      <!-- <img src="/imgs/tree.png" alt="The Sixties Rumble" class="absolute top-0 left-1/2 -translate-x-1/2 w-20 rotate-[-10deg] h-auto"> -->
       <h2 class="text-2xl text-[#064161] mb-2 ">THE SIXTIES RUMBLE</h2>
       <div class="bg-[#FEE96A] w-fit mx-auto px-4 py-2 rounded-full flex items-center gap-2">
        <!-- dot -->
        <div class="animate-pulse w-2 h-2 bg-red-500 rounded-full"></div>
        {/* <span class="w-2 h-2 bg-red-500 relative left-[-16px] rounded-full"></span> */}
        <h3 class="text-2xl font-bold text-[#064161] text-center ">South America in the 60s</h3> 
        </div>
    </div>


    <!-- Interactive section -->
    <div>
       <div class="relative">
         <div class="absolute top-0 left-0 w-full h-full  z-10"></div>
       <!--  Container -->
       <div id="canvas-container" class="relative flex justify-center items-center min-h-[300px] ">
         <!-- Loading Screen -->
         <div id="loading-screen" class="absolute inset-0 flex flex-col items-center justify-center bg-[#064161] z-20">
           <div class="text-center">
             <div class="animate-spin rounded-full h-16 w-16 border-b-2 border-[#FEE96A] mx-auto mb-4"></div>
             <h3 class="text-[#FEE96A] text-xl font-bold mb-2">Loading South America</h3>
             <p class="text-[#FEE96A]/80 text-sm">Preparing the 60s soundscape...</p>
             <div class="mt-4">
               <div class="w-32 bg-[#FEE96A]/20 rounded-full h-2 mx-auto">
                 <div id="loading-progress" class="bg-[#FEE96A] h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
               </div>
               <p id="loading-text" class="text-[#FEE96A]/60 text-xs mt-2">Loading images...</p>
             </div>
           </div>
         </div>
         <!-- Hidden image element as backup -->
         <img id="backup-image" src="/imgs/southam1.png" style="display: none;" alt="South America Map">
         <!-- <h3 class="text-3xl mb-8 rotate-[-10deg] font-bold text-[#FEE96A] absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 ">South America in the 60s</h3> -->
         </div>
       </div>
      </div>
      <div class="flex justify-center items-center">
        <NowPlaying />

      </div>

      <!-- Region Details -->
      <div class="mb-12">
        <RegionDetails />
      </div>

    <!-- Schedule Section -->
    <div class="max-w-4xl mx-auto">
      
      <hr class="border-2 border-[#FEE96A] mb-8">
      <h3 class="text-3xl font-bold text-[#064161] text-center mb-8">Week Schedule</h3>
      <div class="flex items-center justify-center gap-2 mb-8">
        <div>
        <img src="/imgs/fgrlogo.png" alt="FGR logo" class="max-w-[56px] rounded">
      </div>
      <div>
        <h2 class="text-2xl text-[#FEE96A]">X</h2>
      </div>
      <div>
        <img src="/imgs/beachville_logo.png" alt="FGR logo" class="max-h-[56px] rounded">
      </div>
      </div>
      <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
        {regions.map((region, index) => (
          <div class={` p-6 rounded-lg border border-[#FEE96A]/30 hover:border-[#FEE96A]/50 transition-colors ${region.isActive ? 'bg-[#FEE96A]/10 border-[#FEE96A]' : 'bg-[#FEE96A]/10 border-[#FEE96A]/30'}`}>
            <div class="flex items-center mb-4">
              <div class="w-4 h-4 rounded-full mr-3" style={`background-color: ${region.color};`}></div>
              <h4 class="text-xl font-bold text-[#064161]">{region.name}</h4>
            </div>
            <p class="text-[#064161]/80 mb-4">{region.description}</p>
            <p class="text-sm text-[#064161] bg-[#FEE96A] w-fit px-2 py-1 rounded-full mb-2 ">{region.day}</p>
            <p class="text-sm text-[#064161] font-bold">{region.isActive ? '[TODAY!]' : ''}</p>
          </div>
        ))}
      </div>
    </div>
  </main>

 
  
  <!-- Now Playing Component -->
</Layout>


<!-- <script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/2.0.4/p5.min.js" integrity="sha512-rOTpdy9fXlcLeLxPj5H4pof51FAx2lVK8Soexk8yTek9wrenwm56MKT2VddH8GCDd4a2js2i4GwezlUkbGdVQg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script> -->
<script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/2.0.5-rc.0/p5.js" integrity="sha512-jd5u/oY0j6Ha4yGjMSGohWJz8yQocZiHID/zEtZiIWoGL0pEm2l7lFKIRgMeVOha8bvBwHhw7vUDwbJ27vCu6g==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script is:inline>
 //p5.js code
 
 let imgs = [];
 let totalImages = 11;
 let imagesLoaded = 0;
 let canvasReady = false;
 let isAnimating = false;

function shuffleArray(arr) {
  const array = [...arr]; // copy to avoid mutating original
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1)); // pick a random index
    [array[i], array[j]] = [array[j], array[i]];   // swap
  }
  return array;
}



 function placeImagesInGrid(imgs, totalImages, frameCount) {
   let colSize = Math.floor(Math.sqrt(totalImages));
   let rowSize = Math.floor(totalImages/colSize);  

   if(frameCount > 0) {
    // console.log('animating', frameCount);

    isAnimating = true;
    for (let i = 0; i < imgs.length; i++) {
     imgs[i].nx = i%colSize*width/colSize - imgs[i].width/4;
     imgs[i].ny = i/rowSize*height/rowSize - imgs[i].height;
   }
   } else {
    // console.log('not animating', frameCount);
    for (let i = 0; i < imgs.length; i++) {
      imgs[i].x = i%colSize*width/colSize - imgs[i].width/4;
      imgs[i].y = i/rowSize*height/rowSize - imgs[i].height;
    }
   }
  
 }

 // Loading screen helper functions
 function updateLoadingProgress(percent) {
   const progressBar = document.getElementById('loading-progress');
   if (progressBar) {
     progressBar.style.width = percent + '%';
   }
 }

 function updateLoadingText(text) {
   const loadingText = document.getElementById('loading-text');
   if (loadingText) {
     loadingText.textContent = text;
   }
 }

 function hideLoadingScreen() {
   const loadingScreen = document.getElementById('loading-screen');
   if (loadingScreen) {
     loadingScreen.style.opacity = '0';
     loadingScreen.style.transition = 'opacity 0.5s ease-out';
     setTimeout(() => {
       loadingScreen.style.display = 'none';
     }, 500);
   }
 }

   async function setup() {
   // Update loading text
   updateLoadingText('Loading main image...');
   updateLoadingProgress(10);
   
   img1 = await loadImage('/imgs/southam1.png');
   updateLoadingProgress(20);
   
   updateLoadingText('Creating canvas...');
   const pcanvas = createCanvas(window?.innerWidth-32, window?.innerHeight/2);
   pcanvas.parent('canvas-container');
   updateLoadingProgress(30);
   
   updateLoadingText('Loading South America images...');
   let imgArray = [];
   for (let i = 0; i < totalImages; i++) {
     updateLoadingText(`Loading image ${i + 1} of ${totalImages}...`);
     const progress = 30 + ((i + 1) / totalImages) * 60; // 30% to 90%
     updateLoadingProgress(progress);
     
     const img = await loadImage(`/imgs/SA/s${i+1}.png`);
     img.width = img.width/2;
     img.height = img.height/2;
     imgArray.push(img);
     imagesLoaded++;
   }
   
   updateLoadingText('Finalizing setup...');
   updateLoadingProgress(95);
   
   // randomize the image order
   imgs = shuffleArray(imgArray);
   // place them in a grid
   placeImagesInGrid(imgs, totalImages);
   background(165,218,210);
   
   updateLoadingProgress(100);
   updateLoadingText('Ready!');
   
   // Hide loading screen after a short delay
   setTimeout(() => {
     hideLoadingScreen();
   }, 500);
   
   canvasReady = true;


  // for (let i = 0; i < 20; i++) {
  // circles.push({x: random(-width,width), y: random(-height,height), s: random(10,100)});
// }
// background(100);

}

   function draw() {
   // Only draw if canvas is ready
   if (!canvasReady) {
     return;
   }
   
   function updateImageLocations(imgs, totalImages) {
    for (let i = 0; i < totalImages; i++) {
      if(isAnimating) {
      imgs[i].x = lerp(imgs[i].x, imgs[i].nx, 0.1);
      imgs[i].y = lerp(imgs[i].y, imgs[i].ny, 0.1);
    }

   }
  // check if last image is in the correct position
  if(imgs[totalImages-1].x + 0.2 > imgs[totalImages-1].nx && imgs[totalImages-1].y + 0.2 > imgs[totalImages-1].ny) {
    isAnimating = false;
    // console.log('animating done');
  }
  }



// draw the images
for (let i = 0; i < totalImages; i++) {
  let imageIndex = i%totalImages;
 
    let x = noise(0.005 * frameCount+i*100 + i)* 50;
    let y = noise(0.005 * frameCount+i*100 + i+1) *50;
    image(imgs[imageIndex], imgs[imageIndex].x + x, imgs[imageIndex].y + y);
  
  
}
if(frameCount % 60 == 0 && !isAnimating) {
  imgs = shuffleArray(imgs);
  placeImagesInGrid(imgs, totalImages, frameCount);
}
updateImageLocations(imgs, totalImages);
  // rotate(frameCount/100);

  
  // let x = noise(0.008 * frameCount)*width/2;
  // let y = noise(0.005 * frameCount+100)*height/2;
  // let s = noise(0.005 * frameCount+200)*100;
  // translate(width/4,height/8);

  // image(img1,  0 , 0,img1.width/2,img1.height/2);


  // text("FGR",width/2,height/2);
}

document.addEventListener("scroll", () => {
    const scrollY = window.scrollY;
    document.querySelectorAll(".decor-img").forEach((img, i) => {
      img.style.transform = `translateY(${scrollY * 0.05 * (i+1)}px) rotate(${(scrollY * 0.1 )}deg)`;
    });
  });

</script>

<style>
   .region-marker {
    cursor: pointer;
  }
  
  .region-marker:hover {
    transform: scale(1.2);
  }
  
  .playlist-card {
    transition: all 0.3s ease;
  }
  
  .playlist-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 10px 25px rgba(254, 233, 106, 0.3);
  }

   .decorations {
    position: fixed;
    inset: 0; /* full screen */
    pointer-events: none; /* don’t block clicks */
    overflow: hidden;
    z-index: 0;
  }
  .decor-img {
    position: absolute;
    width: 60px; /* small size */
    opacity: 0.8;
  }

  /* Sprinkle them around manually (or randomize with JS) */
  .decor-img:nth-child(1) { top: 0%; left: 2%; rotate: 10deg; }
  .decor-img:nth-child(2) { bottom: 15%; right: 8%; rotate: -10deg; }
  .decor-img:nth-child(3) { top: 2%; right: 10%; rotate: 10deg; }
  .decor-img:nth-child(4) { top: 20%; left: -3%; rotate: -10deg; }
  .decor-img:nth-child(5) { top: 50%; right: 2%; rotate: 10deg; }

  /* Spin animations */
  /* @keyframes spinee {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }
  .spin-0 { animation: spinee 20s linear infinite; }
  .spin-1 { animation: spinee 35s linear infinite reverse; } */

  /* Pulse animations */
  /* @keyframes pulsee {
    0%, 100% { transform: scale(1); opacity: 0.8; }
    50% { transform: scale(1.2); opacity: 1; }
  }
  .pulse-0 { animation: pulsee 6s ease-in-out infinite; }
  .pulse-1 { animation: pulsee 8s ease-in-out infinite; }
  .pulse-2 { animation: pulsee 10s ease-in-out infinite; } */

  .polka {
  /* background-image: 
    radial-gradient(rgb(255, 255, 255) 29.2%, transparent 29.2%),
    radial-gradient(rgb(255, 255, 255) 29.2%, transparent 29.2%);
  background-position: 0px 0px, 8px 8px;
  background-size: 16px 16px; */
  /* background-color: rgb(255, 244, 106); */
  background-image: url('/imgs/tree.png');
  background-size: cover;
  background-position: 0px 0px;
  background-repeat: no-repeat;
}
</style>